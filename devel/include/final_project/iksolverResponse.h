// Generated by gencpp from file final_project/iksolverResponse.msg
// DO NOT EDIT!


#ifndef FINAL_PROJECT_MESSAGE_IKSOLVERRESPONSE_H
#define FINAL_PROJECT_MESSAGE_IKSOLVERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace final_project
{
template <class ContainerAllocator>
struct iksolverResponse_
{
  typedef iksolverResponse_<ContainerAllocator> Type;

  iksolverResponse_()
    : joint_values()  {
    }
  iksolverResponse_(const ContainerAllocator& _alloc)
    : joint_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_values_type;
  _joint_values_type joint_values;





  typedef boost::shared_ptr< ::final_project::iksolverResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::final_project::iksolverResponse_<ContainerAllocator> const> ConstPtr;

}; // struct iksolverResponse_

typedef ::final_project::iksolverResponse_<std::allocator<void> > iksolverResponse;

typedef boost::shared_ptr< ::final_project::iksolverResponse > iksolverResponsePtr;
typedef boost::shared_ptr< ::final_project::iksolverResponse const> iksolverResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::final_project::iksolverResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::final_project::iksolverResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::final_project::iksolverResponse_<ContainerAllocator1> & lhs, const ::final_project::iksolverResponse_<ContainerAllocator2> & rhs)
{
  return lhs.joint_values == rhs.joint_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::final_project::iksolverResponse_<ContainerAllocator1> & lhs, const ::final_project::iksolverResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace final_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::final_project::iksolverResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::final_project::iksolverResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::final_project::iksolverResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::final_project::iksolverResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::final_project::iksolverResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::final_project::iksolverResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::final_project::iksolverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b79b974a6ae3f399e6d798ff6613e367";
  }

  static const char* value(const ::final_project::iksolverResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb79b974a6ae3f399ULL;
  static const uint64_t static_value2 = 0xe6d798ff6613e367ULL;
};

template<class ContainerAllocator>
struct DataType< ::final_project::iksolverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "final_project/iksolverResponse";
  }

  static const char* value(const ::final_project::iksolverResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::final_project::iksolverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_values\n"
"\n"
;
  }

  static const char* value(const ::final_project::iksolverResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::final_project::iksolverResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct iksolverResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::final_project::iksolverResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::final_project::iksolverResponse_<ContainerAllocator>& v)
  {
    s << indent << "joint_values[]" << std::endl;
    for (size_t i = 0; i < v.joint_values.size(); ++i)
    {
      s << indent << "  joint_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINAL_PROJECT_MESSAGE_IKSOLVERRESPONSE_H
